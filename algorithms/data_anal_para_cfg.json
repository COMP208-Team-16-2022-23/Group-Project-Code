[
  {
    "section_name": "Descriptive statistics",
    "code_name": "descriptive_statistics",
    "algorithms": [
      {
        "name": "Normality test",
        "code_name": "normality_test",
        "description": "A normality test is any statistical test for determining whether a data sample comes from a normal distribution.",
        "link": "https://en.wikipedia.org/wiki/Normality_test",
        "variables": [
          {
            "name": "variable",
            "description": "The variable to test for normality.",
            "type": "single_select"
          }
        ],
        "parameters": [
        ]
      }
    ]
  },
  {
    "section_name": "ML Classification",
    "code_name": "ml_classification",
    "algorithms": [
      {
        "name": "K-Nearest Neighbors",
        "code_name": "knn_classification",
        "description": "K-Nearest Neighbors is a simple algorithm that stores all available cases and classifies new cases based on a similarity measure (e.g., distance functions).",
        "link": "https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm",
        "variables": [
          {
            "name": "features",
            "description": "The variables to use as features.",
            "type": "multi_select"
          },
          {
            "name": "target",
            "description": "The variable to use as the target.",
            "type": "single_select"
          }
        ],
        "parameters": [
          {
            "name": "Data shuffling",
            "code_name": "shuffle",
            "type": "checkbox",
            "description": "Reshuffle the data to re-segment the data according to the training.",
            "default": "checked"
          },
          {
            "name": "Training ratio",
            "code_name": "train_ratio",
            "type": "number",
            "description": "The ratio of the data to use for training.",
            "default": 0.8
          },
          {
            "name": "Cross validation",
            "code_name": "cross_validation",
            "type": "select",
            "options": [
              "None",
              "10-fold",
              "5-fold",
              "4-fold",
              "3-fold",
              "2-fold"
            ],
            "description": "The cross validation method to use.",
            "default": "None"
          },
          {
            "name": "Number of neighbors",
            "code_name": "n_neighbors",
            "type": "number",
            "description": "Number of neighbors to use by default for kneighbors queries.",
            "default": 5
          },
          {
            "name": "Weights",
            "code_name": "weights",
            "type": "select",
            "options": [
              "uniform",
              "distance"
            ],
            "description": "Weight function used in prediction. Possible values: 'uniform': uniform weights. All points in each neighborhood are weighted equally. 'distance': weight points by the inverse of their distance. in this case, closer neighbors of a query point will have a greater influence than neighbors which are further away.",
            "default": "uniform"
          },
          {
            "name": "Algorithm",
            "code_name": "algorithm",
            "type": "select",
            "options": [
              "auto",
              "ball_tree",
              "kd_tree",
              "brute"
            ],
            "description": "Algorithm used to compute the nearest neighbors: 'ball_tree' will use BallTree, 'kd_tree' will use KDTree, 'brute' will use a brute-force search. 'auto' will attempt to decide the most appropriate algorithm based on the values passed to fit method. Note: fitting on sparse input will override the setting of this parameter, using brute force.",
            "default": "auto"
          },
          {
            "name": "Leaf size",
            "code_name": "leaf_size",
            "type": "number",
            "description": "Leaf size passed to BallTree or KDTree. This can affect the speed of the construction and query, as well as the memory required to store the tree. The optimal value depends on the nature of the problem.",
            "default": 30
          },
          {
            "name": "P",
            "code_name": "p",
            "type": "number",
            "description": "Parameter for the Minkowski metric from sklearn.metrics.pairwise.pairwise_distances. When p = 1, this is equivalent to using manhattan_distance (l1), and euclidean_distance (l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used.",
            "default": 2
          }
        ]
      },
      {
        "name": "Decision Tree",
        "code_name": "decision_tree",
        "description": "A decision tree is a flowchart-like structure in which each internal node represents a test on an attribute, each branch represents the outcome of the test, and each leaf node represents a class label (decision taken after computing all attributes).",
        "link": "https://en.wikipedia.org/wiki/Decision_tree_learning",
        "variables": [
          {
            "name": "features",
            "description": "The variables to use as the features.",
            "type": "multi_select"
          },
          {
            "name": "target",
            "description": "The variable to use as the target.",
            "type": "single_select"
          }
        ],
        "parameters": [
          {
            "name": "Max depth",
            "code_name": "max_depth",
            "type": "number",
            "description": "The function to measure the quality of a split. Supported criteria are “gini” for the Gini impurity and “entropy” for the information gain.",
            "default": "gini"
          }
        ]
      }
    ]
  }
]